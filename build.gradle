plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id
apply plugin: 'java'

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
    withJavadocJar()
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug.export', 'true'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            arg '-mixin.config=' + mod_id + '.mixins.json'
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
            arg '-mixin.config=' + mod_id + '.mixins.json'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    ext.refMap = "main.refmap.json"
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
    debug.export = true
    debug.verbose = true
    quiet = false
}

repositories {
    repositories {
        // Main repositories

        exclusiveContent {
            forRepository {
                maven {
                    url "https://cursemaven.com"
                }
            }
            filter {
                includeGroup "curse.maven"
            }
        }

        maven { url 'https://maven.minecraftforge.net/' }
        maven { url 'https://maven.parchmentmc.org' }
        maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }

        // Modrinth for Better Combat
        maven { url 'https://api.modrinth.com/maven' }

        // Cloth Config
        maven { url 'https://maven.shedaniel.me/' }

        // playerAnimator
        maven { url 'https://maven.kosmx.dev/' }
    }

}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Mixin
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1")) {
        jarJar.ranged(it, "[0.4.1,)")
    }
    // GeckoLib
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}")
    implementation("com.eliotlash.mclib:mclib:20")
    implementation(fg.deobf("me.shedaniel.cloth:cloth-config-forge:11.1.136"))
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${player_anim_version}")
    implementation fg.deobf('maven.modrinth:better-combat:1.8.6+1.20.1-forge')

//    implementation fg.deobf("curse.maven:in-game-account-switcher-232676:5457030")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version: forge_version,
            forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id,
            mod_name: mod_name,
            mod_license: mod_license,
            mod_version: mod_version,
            mod_authors: mod_authors,
            mod_description: mod_description,
    ]
    inputs.properties replaceProperties
    duplicatesStrategy = DuplicatesStrategy.WARN

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }

    exclude '.cache'
}


publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:deprecation"
}